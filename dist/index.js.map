{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { createBrowserNode, AuthProvider } from 'jazz-browser'\nimport { Signal, signal, effect } from '@preact/signals'\nimport { BrowserLocalAuth } from 'jazz-browser-auth-local'\nimport {\n    Profile,\n    LocalNode,\n    CoID,\n    CoValue,\n    CoMap,\n    Account,\n    AccountMeta\n} from 'cojson'\nimport { ResolvedAccount, Resolved, autoSub } from 'jazz-autosub'\n\nexport type LoadingStatus = { status: 'loading' }\nexport type ReadyStatus = {\n    status: 'ready';\n    logIn: () => Promise<void>;\n    signUp: (username:string) => Promise<void>;\n}\nexport type SignedInStatus = {\n    status: 'signedIn';\n    logOut: () => void;\n}\nexport type AuthStatus = { status:null } |\n    LoadingStatus |\n    ReadyStatus |\n    SignedInStatus\n\nexport function createLocalAuth ({\n    appName,\n    appHostname\n}:{\n    appName:string;\n    appHostname?:string;\n}):{\n    authProvider:AuthProvider;\n    authStatus:Signal<AuthStatus>;\n    logoutCount:Signal<number>;\n} {\n    const authStatus:Signal<AuthStatus> = signal({ status: null })\n    const logoutCount = signal<number>(0)\n    const localAuthObj = new BrowserLocalAuth(\n        {\n            onReady (next) {\n                authStatus.value = {\n                    status: 'ready',\n                    logIn: next.logIn,\n                    signUp: next.signUp,\n                }\n            },\n\n            onSignedIn (next) {\n                authStatus.value = {\n                    status: 'signedIn',\n                    logOut: () => {\n                        next.logOut()\n                        authStatus.value = { status: 'loading' }\n                        logoutCount.value = (logoutCount.value + 1)\n                    },\n                }\n            },\n        },\n\n        appName,\n        appHostname\n    )\n\n    return { authProvider: localAuthObj, authStatus, logoutCount }\n}\n\nexport function createLocalNode ({\n    auth,\n    syncAddress,\n    authStatus,\n    logoutCount\n}:{\n    auth:AuthProvider;\n    syncAddress?:string;\n    authStatus:Signal<AuthStatus>\n    logoutCount:Signal<number>\n}):{\n    done:()=>void,\n    node:Signal<null|LocalNode>\n} {\n    const nodeSignal:Signal<null|LocalNode> = signal(null)\n    let _done:(() => void)\n\n    let count = logoutCount.peek()\n\n    effect(async () => {\n        if (logoutCount.value > count) {\n            // create a new node if you log out\n            count = logoutCount.value\n            done()\n            const nodeHandle = await createBrowserNode({ auth, syncAddress })\n            nodeSignal.value = nodeHandle.node\n            _done = nodeHandle.done\n            return\n        }\n\n        // only create a localNode if there is no authStatus\n        // NOTE you *must* create a localNode before the authStatus will change\n        //   to 'ready'\n        if (authStatus.value.status !== null) return\n\n        // there is not an authStatus, so create a node\n\n        const nodeHandle = await createBrowserNode({\n            auth,\n            syncAddress\n        })\n\n        nodeSignal.value = nodeHandle.node\n        _done = nodeHandle.done\n    })\n\n    function done () {\n        if (!_done) throw new Error('Called `done` before it exists')\n        _done()\n    }\n\n    return { done, node: nodeSignal }\n}\n\nexport function telepathicSignal<T extends CoValue> ({\n    id,\n    node\n}:{\n    id:CoID<T>\n    node:LocalNode\n}):[Signal<Resolved<T>|null>, ()=>void] {\n    const state:Signal<Resolved<T>|null> = signal(null)\n\n    const unsubscribe = autoSub(id, node, (data:Resolved<T>) => {\n        state.value = data\n    })\n\n    return [state, unsubscribe]\n}\n\n/**\n * Get your profile\n */\nexport function profile<\n    P extends Profile = Profile,\n    T extends CoMap = CoMap,\n    Meta extends AccountMeta = AccountMeta\n> (node:Signal<LocalNode|null>):{\n    profile:Signal<null|ResolvedAccount<Account<P, T, Meta>>>;\n    unsubscribe:()=>void\n} {\n    const profile:Signal<null|ResolvedAccount<Account<P, T, Meta>>> = signal(null)\n    let _unsubscribe = () => {}\n\n    const dispose = effect(() => {\n        if (!node.value) return\n\n        _unsubscribe = autoSub('me', node.value, (resolved:ResolvedAccount) => {\n            profile.value = resolved as ResolvedAccount<Account<P, T, Meta>>\n        })\n    })\n\n    function unsubscribe () {\n        _unsubscribe()\n        dispose()\n    }\n\n    return { profile, unsubscribe }\n}\n"],
  "mappings": ";AAAA,SAAS,yBAAuC;AAChD,SAAiB,QAAQ,cAAc;AACvC,SAAS,wBAAwB;AAUjC,SAAoC,eAAe;AAiB5C,gBAAS,gBAAiB;AAAA,EAC7B;AAAA,EACA;AACJ,GAOE;AACE,QAAM,aAAgC,OAAO,EAAE,QAAQ,KAAK,CAAC;AAC7D,QAAM,cAAc,OAAe,CAAC;AACpC,QAAM,eAAe,IAAI;AAAA,IACrB;AAAA,MACI,QAAS,MAAM;AACX,mBAAW,QAAQ;AAAA,UACf,QAAQ;AAAA,UACR,OAAO,KAAK;AAAA,UACZ,QAAQ,KAAK;AAAA,QACjB;AAAA,MACJ;AAAA,MAEA,WAAY,MAAM;AACd,mBAAW,QAAQ;AAAA,UACf,QAAQ;AAAA,UACR,QAAQ,MAAM;AACV,iBAAK,OAAO;AACZ,uBAAW,QAAQ,EAAE,QAAQ,UAAU;AACvC,wBAAY,QAAS,YAAY,QAAQ;AAAA,UAC7C;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IAEA;AAAA,IACA;AAAA,EACJ;AAEA,SAAO,EAAE,cAAc,cAAc,YAAY,YAAY;AACjE;AAEO,gBAAS,gBAAiB;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ,GAQE;AACE,QAAM,aAAoC,OAAO,IAAI;AACrD,MAAI;AAEJ,MAAI,QAAQ,YAAY,KAAK;AAE7B,SAAO,YAAY;AACf,QAAI,YAAY,QAAQ,OAAO;AAE3B,cAAQ,YAAY;AACpB,WAAK;AACL,YAAMA,cAAa,MAAM,kBAAkB,EAAE,MAAM,YAAY,CAAC;AAChE,iBAAW,QAAQA,YAAW;AAC9B,cAAQA,YAAW;AACnB;AAAA,IACJ;AAKA,QAAI,WAAW,MAAM,WAAW;AAAM;AAItC,UAAM,aAAa,MAAM,kBAAkB;AAAA,MACvC;AAAA,MACA;AAAA,IACJ,CAAC;AAED,eAAW,QAAQ,WAAW;AAC9B,YAAQ,WAAW;AAAA,EACvB,CAAC;AAED,WAAS,OAAQ;AACb,QAAI,CAAC;AAAO,YAAM,IAAI,MAAM,gCAAgC;AAC5D,UAAM;AAAA,EACV;AAEA,SAAO,EAAE,MAAM,MAAM,WAAW;AACpC;AAEO,gBAAS,iBAAqC;AAAA,EACjD;AAAA,EACA;AACJ,GAGwC;AACpC,QAAM,QAAiC,OAAO,IAAI;AAElD,QAAM,cAAc,QAAQ,IAAI,MAAM,CAAC,SAAqB;AACxD,UAAM,QAAQ;AAAA,EAClB,CAAC;AAED,SAAO,CAAC,OAAO,WAAW;AAC9B;AAKO,gBAAS,QAIb,MAGD;AACE,QAAMC,WAA4D,OAAO,IAAI;AAC7E,MAAI,eAAe,MAAM;AAAA,EAAC;AAE1B,QAAM,UAAU,OAAO,MAAM;AACzB,QAAI,CAAC,KAAK;AAAO;AAEjB,mBAAe,QAAQ,MAAM,KAAK,OAAO,CAAC,aAA6B;AACnE,MAAAA,SAAQ,QAAQ;AAAA,IACpB,CAAC;AAAA,EACL,CAAC;AAED,WAAS,cAAe;AACpB,iBAAa;AACb,YAAQ;AAAA,EACZ;AAEA,SAAO,EAAE,SAAAA,UAAS,YAAY;AAClC;",
  "names": ["nodeHandle", "profile"]
}
